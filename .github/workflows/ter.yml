name: Yandex Cloud Terraform CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: "1.5.7"
  YC_FOLDER_ID: "b1gsg9mk694pae2d18og"
  YC_CLOUD_ID: "b1grurkigc4agd16neb0"
  TF_BACKEND_BUCKET: "storage-website-test"
  YC_STORAGE_ENDPOINT: "https://storage.yandexcloud.net"
  YC_REGION: "ru-central1"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Terraform Init
        working-directory: ./terraform/kub
        run: |
          terraform init -backend=false
          
      - name: Terraform Validate
        working-directory: ./terraform/kub
        run: terraform validate
        
      - name: Terraform Format Check
        working-directory: ./terraform/kub
        run: |
          # Выводим информацию о несоответствии форматирования, но не завершаем с ошибкой
          terraform fmt -check -recursive || echo "::warning::Some Terraform files need formatting"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform/kub
        run: |
          terraform init -reconfigure \
            -backend-config="access_key=${{ secrets.YC_STORAGE_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.YC_STORAGE_SECRET_KEY }}" \
            -backend-config="endpoint=${{ env.YC_STORAGE_ENDPOINT }}" \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="region=${{ env.YC_REGION }}" \
            -backend-config="skip_region_validation=true" \
            -backend-config="force_path_style=true"

      - name: Terraform Plan
        working-directory: ./terraform/kub
        run: terraform plan -out=tfplan
        if: github.ref == 'refs/heads/main'

      - name: Terraform Apply
        working-directory: ./terraform/kub
        run: terraform apply -auto-approve tfplan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
